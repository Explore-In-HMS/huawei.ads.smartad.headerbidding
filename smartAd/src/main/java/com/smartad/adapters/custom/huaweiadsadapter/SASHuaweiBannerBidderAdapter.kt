/*
 * Copyright 2022. Explore in HMS. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.smartad.adapters.custom.huaweiadsadapter

import android.content.Context
import android.util.Log
import android.widget.LinearLayout
import com.huawei.hms.ads.AdListener
import com.huawei.hms.ads.banner.BannerView
import com.smartad.adapters.custom.huaweiadsadapter.data.HuaweiAdResponse
import com.smartad.adapters.custom.huaweiadsadapter.utils.Constants.SAS_TAG
import com.smartadserver.android.coresdk.util.SCSUtil
import com.smartadserver.android.library.thirdpartybidding.SASBannerBidderAdapter
import com.smartadserver.android.library.thirdpartybidding.SASBannerBidderAdapterListener
import com.smartadserver.android.library.util.SASUtil

class SASHuaweiBannerBidderAdapter(adResponse: HuaweiAdResponse, context: Context) :
    SASHuaweiBaseBidderAdapter(
        adResponse
    ), SASBannerBidderAdapter {

    //Bid Response
    private val adResponse = adResponse

    //Huawei Banner view
    var bannerView: BannerView? = null

    //Banner parent view group for proper banner sizing
    var linearLayout: LinearLayout? = null

    //Callback to notify Smart SDK of events generated by Huawei banner
    var bannerBidderAdapterListener: SASBannerBidderAdapterListener? = null

    init {
        //No ad : abort
        if (adResponse.multiad?.size == 0)
            throw IllegalArgumentException("No ad size found for Huawei's banner, we will not render the ad.")

        //Create Huawei banner listener than will forward events to the SASBannerBidderAdapterListener instance

        val adListener: AdListener = object : AdListener() {
            override fun onAdLoaded() {
                super.onAdLoaded()
                // pass the linearLayout containing the Huawei banner to the smart SDK
                Log.d(SAS_TAG, "onAdLoaded: ")
                linearLayout?.let { bannerBidderAdapterListener?.onBannerLoaded(it) }
            }

            override fun onAdFailed(p0: Int) {
                super.onAdFailed(p0)
                Log.d(SAS_TAG, "onAdFailed: ")
                bannerBidderAdapterListener?.adRequestFailed(
                    "Huawei bidder banner ad could not be displayed",
                    false
                )
            }

            override fun onAdClicked() {
                super.onAdClicked()
                Log.d(SAS_TAG, "onAdClicked: ")
                // ad click to open already handled in onAdOpen, discard any other click
            }

            override fun onAdLeave() {
                super.onAdLeave()
                Log.d(SAS_TAG, "onAdLeave: ")
                bannerBidderAdapterListener?.onAdLeftApplication()
            }

            override fun onAdOpened() {
                super.onAdOpened()
                Log.d(SAS_TAG, "onAdOpened: ")
                // onAdOpen corresponds to the onAdClicked in the smart SDK
                bannerBidderAdapterListener?.onAdClicked()
            }

            override fun onAdClosed() {
                super.onAdClosed()
                Log.d(SAS_TAG, "onAdClosed: ")
                bannerBidderAdapterListener?.onAdClosed()
            }

            override fun onAdImpression() {
                super.onAdImpression()
                Log.d(SAS_TAG, "onAdImpression: ")
            }
        }

        bannerView = BannerView(context)
        bannerView?.adListener = adListener

        val width: Int? =
            adResponse.multiad?.get(0)?.content?.get(0)?.metaData?.imageInfo?.get(0)?.width
        val height: Int? =
            adResponse.multiad?.get(0)?.content?.get(0)?.metaData?.imageInfo?.get(0)?.height
        if (width == null || height == null) {
            throw IllegalArgumentException("No ad size found for Huawei's banner, we will not render the ad.")
        }

        // ...and wrap it in the parent Layout with proper size as fetched above
        linearLayout = LinearLayout(context)
        linearLayout!!.addView(
            bannerView,
            LinearLayout.LayoutParams(
                SASUtil.getDimensionInPixels(width, context.resources),
                SASUtil.getDimensionInPixels(height, context.resources)
            )
        )
    }


    override fun loadBidderBanner(bannerAdapterListener: SASBannerBidderAdapterListener) {
        this.bannerBidderAdapterListener = bannerAdapterListener
        SCSUtil.getMainLooperHandler().post {
            //No operation
            // **HTML MARKUP**
        }
    }
}